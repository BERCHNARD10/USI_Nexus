import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Components from '../../components/Components';
const { TitlePage, Paragraphs, TitleSection, LoadingButton, CustomInputOnchange} = Components;
import { Tooltip } from 'flowbite-react';
import { useAuth } from '../../server/authUser'; // Importar el hook de autenticación
import { FaEdit, FaSave, FaTimes } from 'react-icons/fa';
import { useForm } from 'react-hook-form';

const DetallePractica = () => {
  const { intNumeroPractica } = useParams();
  const [detalleActividad, setDetalleActividad] = useState({});
  const { isAuthenticated, userData } = useAuth();
  const [rubricaData, setRubricaData] = useState([]);
  const [puntajeTotal, setPuntajeTotal] = useState(0);
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState([]);
  const [tempData, setTempData] = useState([]);

  const {
    register,
    handleSubmit,
    watch,
    trigger,
    formState: { errors },
  } = useForm();

  const validatePuntajeTotal = (data) => {
    return data.reduce((sum, rubrica) => sum + (parseInt(rubrica.intValor) || 0), 0) <= 10;
  };

  const handleEditClick = () => {
    setEditedData(rubricaData);
    setIsEditing(true);
  };

  const handleSaveClick = async () => {
    if (!validatePuntajeTotal(editedData)) {
      alert('El puntaje total no puede exceder de 10 puntos.');
      return;
    }

    try {
      const response = await fetch('https://robe.host8b.me/WebServices/cargarMaterias.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ updatedRubrica: editedData }),
      });
      const data = await response.json();

      if (data.done) {
        setRubricaData(editedData);
        setIsEditing(false);
      } else {
        console.error('Error al actualizar la rúbrica');
      }
    } catch (error) {
      console.error('Error:', error.message);
    }
  };

  const handleCancelClick = () => {
    setEditedData(rubricaData);
    setIsEditing(false);
  };

  const handleInputChange = (index, field, value) => {
    const newEditedData = [...editedData];
    newEditedData[index][field] = value;
    setEditedData(newEditedData);
  };
  
  useEffect(() => {
    const fetchActividad = async () => {
      const requestData = { idPracticaDetalle: intNumeroPractica };
      try {
        const response = await fetch('https://robe.host8b.me/WebServices/cargarMaterias.php', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestData),
        });
        const data = await response.json();

        if (data.done) {
          setDetalleActividad(data.message.detallePractica);
          setRubricaData(data.message.detalleRubrica);
          setEditedData(data.message.detalleRubrica);
        } else {
          throw new Error('Error al cargar los datos de la actividad');
        }
      } catch (error) {
        console.error('Error:', error.message);
      }
    };

    fetchActividad();
  }, [intNumeroPractica]);

  useEffect(() => {
    const dataToSum = isEditing ? editedData : rubricaData;
    const total = dataToSum.reduce((sum, rubrica) => sum + (parseInt(rubrica.intValor) || 0), 0);
    setPuntajeTotal(total);
  }, [rubricaData, editedData, isEditing]);

  return (
    <section className='w-full flex flex-col'>
      <TitlePage label={detalleActividad.vchNombre} />
      <Paragraphs className="ml-3" label={detalleActividad.vchDescripcion} />
      <div className="flex flex-col md:flex-row gap-4">
        <div className='md:w-9/12 md:flex flex-col gap-y-4'>
          <div className="mb-4 md:mb-0 rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-6 xl:p-8">
            <TitleSection label="Instrucciones" />
            <Paragraphs label={detalleActividad.vchDescripcion} />
          </div>
          <div className="grid grid-cols-1 gap-1 md:mb-0 rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-6 xl:p-8">
            <div className="flex justify-between items-center">
              <TitleSection label="Rúbrica de Evaluación" />
              {isEditing ? (
                <div className="flex gap-2">
                  <Tooltip content="Guardar" placement="left">
                    <FaSave className="text-gray-500 cursor-pointer" onClick={handleSaveClick} />
                  </Tooltip>
                  <Tooltip content="Cancelar" placement="left">
                    <FaTimes className="text-gray-500 cursor-pointer" onClick={handleCancelClick} />
                  </Tooltip>
                </div>
              ) : (
                <Tooltip content="Editar" placement="left">
                  <FaEdit className="text-gray-500 cursor-pointer" onClick={handleEditClick} />
                </Tooltip>
              )}
            </div>
            {editedData.map((rubrica, index) => (
              <div key={index} className="space-y-4">
                <div className="grid grid-cols-2 items-center">
                  <div className="text-muted-foreground">
                    {isEditing ? (
                      <CustomInputOnchange
                        label={`Rubro ${index + 1}`}
                        type="text"
                        name={`vchRubro_${index}`}
                        value={rubrica.vchDescripcion || ''}
                        errors={errors}
                        register={register}
                        trigger={trigger}
                        onChange={(value) => handleInputChange(index, 'vchDescripcion', value)}
                      />        
                    ) : (
                      <p>{rubrica.vchDescripcion}</p>
                    )}
                  </div>
                  <div className="flex items-center justify-end gap-2">
                    {isEditing ? (
                      <CustomInputOnchange
                        label={`Valor ${index + 1}`}
                        type="number"
                        name={`intValor_${index}`}
                        value={rubrica.intValor || ''}
                        pattern={/^[0-9]+$/} // Asegúrate de usar un regex válido
                        errorMessage="El valor debe ser un número"
                        errors={errors}
                        register={register}
                        trigger={trigger}
                        onChange={(value) => handleInputChange(index, 'intValor', value)}
                      />        
                    ) : (
                      <span className="font-semibold">{rubrica.intValor}</span>
                    )}
                    {isAuthenticated && userData.roles == null && !isEditing && (
                      <span className="text-muted-foreground">/{rubrica.intValor}</span>
                    )}
                  </div>
                </div>
              </div>
            ))}
            <div className="mt-6 flex justify-between items-center">
              <div className="text-muted-foreground">Puntaje Total</div>
              <div className="flex items-center gap-2">
                {isAuthenticated && userData.roles == null && (
                  <span className="text-muted-foreground">{puntajeTotal}</span>
                )}
                <span className="font-semibold text-2xl">{puntajeTotal}</span>
              </div>
            </div>
          </div>
        </div>
        <div className="md:w-1/4 md:flex flex-col">
          <div className="mb-4 rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-6 xl:p-8">
            <TitleSection label="Tu Trabajo" />
            <address className="text-sm font-normal not-italic text-gray-500 dark:text-gray-400">
              <div className="grid grid-cols-1 gap-1">
                <div>
                  <label htmlFor="file-upload" className="block text-sm font-medium text-gray-700">
                    Subir Archivo
                  </label>
                  <input
                    type="file"
                    id="file-upload"
                    name="file-upload"
                    className="mt-1 p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none sm:text-sm max-sm:w-full md:w-full"
                  />
                </div>
                <LoadingButton normalLabel="Entregar" className="mt-4 w-full text-white py-2 px-4 rounded-lg" />
              </div>
            </address>
          </div>
        </div>
      </div>
    </section>
  );
};

export default DetallePractica;









const fetchAndGenerateExcel = async () => {
  setLoading(true);

  try {
    const idActividades = actividades.map((actividad) => actividad.intClvActividad);

    const requestData = {
        clvMateria: vchClvMateria,
        grupo: chrGrupo,
        periodo: intPeriodo,
        numeroActividad: idActividades
      };
      console.log(requestData)


    const responseInit = await fetch('https://robe.host8b.me/WebServices/obtenerCalificacionesParcial.php', 
      {
        method: 'POST',
        headers: 
        {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });
      const resultInit = await responseInit.json();
      console.log(requestData)

    if (resultInit.done) {
      console.log(resultInit)
    }
    else {
      console.error('Error fetching data:', resultInit.message);
    }
/*
    const response = await fetch('https://robe.host8b.me/WebServices/obtenerCalificacionesParcial.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          idActividades: idActividades
        }),
    });
    console.log(requestData)
    console.log(idActividades)
  const result = await response.json();

    if (result.done) {
      // Prepare data for Excel
      const ws = XLSX.utils.json_to_sheet(result.message, {
        header: [
          'Matrícula', 'Nombre', 'P1', 'P2', 'P3', 'P4', 'P5', 'PF', 'ACTIVIDAD 8', 'ACTIVIDAD 7', 'Cal Final'
        ]
      });
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Calificaciones');

      // Convert to buffer and save as Excel file
      const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
      const file = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });
      saveAs(file, 'calificaciones.xlsx');
    }
    else {
      console.error('Error fetching data:', result.message);
    }*/
  } catch (error) {
    console.error('Error:', error);
  } finally {
    setLoading(false);
  }
};




import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import  Components from '../../components/Components'
const {TitlePage, ContentTitle, Paragraphs, TitleSection, LoadingButton, SelectInput} = Components;
import {Card} from 'flowbite-react';
import { useAuth } from '../../server/authUser'; // Importar el hook de autenticación
import * as XLSX from 'xlsx';
import { useForm } from 'react-hook-form';
import { FaRegFrown } from 'react-icons/fa';
import { Pagination } from "flowbite-react";

const DetalleActividad = () => {
  const { vchClvMateria, chrGrupo, intPeriodo, intNumeroActi } = useParams();
  const [actividad, setActividad] = useState([]);
  const { isAuthenticated, userData } = useAuth(); 
  const [practicas, setPracticas] = useState([]);
  const [file, setFile] = useState(null);
  const [practicasToInsert, setPracticasToInsert] = useState([]);
  const [practicasServer, setPracticasServer] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const onPageChange = (page) => setCurrentPage(page);
  const {register, handleSubmit, trigger, formState: { errors }} = useForm();


  const fetchActividad = async () => 
    {
      const requestData = 
      {
        clvMateria: vchClvMateria,
        grupo: chrGrupo,
        periodo: intPeriodo,
        numeroActividad: intNumeroActi
      };

      try 
      {
        const response = await fetch('https://robe.host8b.me/WebServices/cargarMaterias.php', 
        {
          method: 'POST',
          headers: 
          {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestData)
        });

        const data = await response.json();
        console.log("Respuesta", data);

        if (data.done) 
        {
          setActividad(data.message.detalleActividad);
          setPracticas(data.message.practicasActividad);
        }
        else{

            console.log(data);
        }
      } catch (error) {
        console.error('Error: Error al cargar los datos de la actividad');
        // Manejar el error, mostrar mensaje al usuario, etc.
      }
    };
    
  useEffect(() => {
    fetchActividad();
  }, [vchClvMateria, chrGrupo, intPeriodo, intNumeroActi, ]);



  const craerJsonRubricaSelect = (count) => {
    const datosPracticas = Array.from({ length: count }, (_, index) => ({
      fkActividadGlobal: intNumeroActi,
      vchNombre: `Práctica ${index + 1}` // Puedes personalizar el nombre según tus necesidades
    }));
    setPracticasServer(datosPracticas)
    console.log("Datos de prácticas:", datosPracticas);
  
  };

  const handleFileUpload = (event) => {
    const uploadedFile = event.target.files[0];
    setFile(uploadedFile);
    processFile(uploadedFile);
  };

  const processFile = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];

          // Leer prácticas y rúbrica
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          const practicasData = jsonData[17].slice(12, 21); // M18 a U18
          const rubros = jsonData.slice(18, 24).map(row => row[4]); // E19 a E24
          const valores = jsonData.slice(18, 24).map(row => row[11]); // L19 a L24
          const datosPracticas = practicasData.map((nombre, index) => ({
            numero: index + 1,
            nombre: nombre
          }));


          setPracticasToInsert(datosPracticas);
          const rubrica = rubros.map((rubro, index) => ({
            vchClaveCriterio: `C${index + 1}`,
            vchCriterio: `Criterio ${index + 1}`,
            vchDescripcion: rubro,
            intValor: valores[index]
          }));
          console.log("datos del excel", datosPracticas)

          resolve({ practicasServer, detalles: rubrica });
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = (error) => reject(error);
      reader.readAsArrayBuffer(file);
    });
  };

  const sendDataToServer = async (data) => {
    try {
      const response = await fetch('https://robe.host8b.me/WebServices/InsertarActividades.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      console.log(data);

      const result = await response.json();
      console.log(result);

      if (result.done) {
        fetchActividad()
        alert("Datos agregados correctamente.");
      } else {
        alert("Error al agregar los datos.");
      }
    } catch (error) {
      console.error('Error al enviar los datos', error);
    }
  };

  const handleAddData = async () => {
    if (!file) {
      alert("Por favor, sube un archivo primero.");
      return;
    }

    try {
      const data = await processFile(file);
      await sendDataToServer(data);
    } catch (error) {
      console.error('Error al procesar el archivo', error);
      alert('Error al procesar el archivo.');
    }
  };

  return (
    <div>
      {isAuthenticated && userData.roles !=null? 
      (
        <section className='w-full flex flex-col'>
        <div className="m-3 flex flex-col">
          <TitlePage label={actividad.Nombre_Actividad} />
          <Paragraphs label={actividad.Descripcion_Actividad} />
        </div>
        <div className="flex flex-col md:flex-row">
          <div className='md:w-1/2 md:mr-4 flex flex-col gap-y-4 mb-3'>
            <section className="h-full rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-6 xl:p-8">
              <TitleSection label="Subir Rúbricas" />
              <div className="w-full flex flex-col items-start">
                <input 
                  type="file" 
                  className="block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400" 
                  onChange={handleFileUpload}
                />
                <div className="w-full flex flex-col md:flex-row items-center gap-4 mt-4">
                  <div className="flex-1 w-full">
                    <SelectInput
                      id="numero"
                      labelSelect="Seleccionar hasta qué práctica insertar"
                      label="Número de Prácticas recuperados del excel"
                      name="nombre"
                      options={practicasToInsert}
                      errorMessage="No cumples con el patrón de contraseña"
                      errors={errors}
                      register={register}
                      trigger={trigger}
                      onChange={(e) => craerJsonRubricaSelect(Number(e.target.value))}
                      pattern=""
                      className="w-full"
                    />
                  </div>
                  <div className="w-full md:w-auto flex-shrink-0">
                    <LoadingButton
                      className="w-full md:w-auto h-11"
                      loadingLabel="Cargando..."
                      normalLabel="Agregar"
                      onClick={handleAddData}
                    />
                  </div>
                </div>
                <div className="w-full flex justify-center md:justify-start mt-4 overflow-x-auto">
                  <Pagination currentPage={currentPage} totalPages={8} onPageChange={onPageChange} />
                </div>
              </div>
            </section>
          </div>
          <div className='md:w-1/2 flex flex-col gap-y-4'>
            <section className="rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-6 xl:p-8">
              <TitleSection label="Detalles de la Actividad" />
              <address className="text-sm font-normal not-italic text-gray-500 dark:text-gray-400 mt-3">
                <div>
                  <ContentTitle label="Fecha de Solicitud: " />
                  <Paragraphs label={actividad.Fecha_Solicitud} />
                </div>
                <div>
                  <ContentTitle label="Fecha de Entrega: " />
                  <Paragraphs label={actividad.Fecha_Entrega} />
                </div>
                <div>
                  <ContentTitle label="Valor de la Actividad: " />
                  <Paragraphs label={actividad.Valor_Actividad} />
                </div>
                <div>
                  <ContentTitle label="Clave de Instrumento:" />
                  <Paragraphs label={actividad.Clave_Instrumento} />
                </div>
                <div>
                  <ContentTitle label="Modalidad:" />
                  <Paragraphs label={actividad.Modalidad} />
                </div>
              </address>
            </section>
          </div>
        </div>
        <div className="container mt-8">
          <TitlePage label="Practicas" />
          <>
      {practicas ? (
        <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {practicas.map((practica) => (
            <Card
              key={practica.idPractica}
              href={`/Admin/Detalle/${vchClvMateria}/${chrGrupo}/${intPeriodo}/${intNumeroActi}/${practica.idPractica}`}
              className="rounded-lg overflow-hidden shadow-lg p-0"
              theme={{ root: { children: "p-0" } }}
            >
              <div className="relative h-36">
                <div className="pt-5 pb-6 px-4">
                  <h3 className="text-xl font-bold text-gray-900 text-center">{practica.vchNombre}</h3>
                  <p className="text-sm text-gray-500 text-center">{practica.vchDescripcion}</p>
                </div>
              </div>
            </Card>
          ))}
        </section>
      ) : (
        <section className="flex flex-col items-center justify-center w-full h-64">
          <FaRegFrown className="text-gray-500 text-6xl" />
          <div className="text-center text-gray-500 dark:text-gray-400">
            No hay actividades o prácticas disponibles.
          </div>
        </section>
      )}
    </>
        </div>
        </section>
      )
:
(<div>
<section className='w-full flex flex-col'>
  <div className="m-3 flex flex-col">
    <TitlePage label={actividad.Nombre_Actividad} />
    <Paragraphs label={actividad.Descripcion_Actividad} />
  </div>
  <div className="flex flex-col md:flex-row">
    <div className="container mx-auto mb-4 md:mb-0">
    <>
      {practicas ? (
        <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {practicas.map((practica) => (
            <Card
              key={practica.idPractica}
              href={`/Admin/Detalle/${vchClvMateria}/${chrGrupo}/${intPeriodo}/${intNumeroActi}/${practica.idPractica}`}
              className="rounded-lg overflow-hidden shadow-lg p-0"
              theme={{ root: { children: "p-0" } }}
            >
              <div className="relative h-36">
                <div className="pt-5 pb-6 px-4">
                  <h3 className="text-xl font-bold text-gray-900 text-center">{practica.vchNombre}</h3>
                  <p className="text-sm text-gray-500 text-center">{practica.vchDescripcion}</p>
                </div>
              </div>
            </Card>
          ))}
        </section>
      ) : (
        <section className="flex flex-col items-center justify-center w-full h-64">
          <FaRegFrown className="text-gray-500 text-6xl" />
          <div className="text-center text-gray-500 dark:text-gray-400">
            No hay actividades o prácticas disponibles.
          </div>
        </section>
      )}
    </>
    </div>
    <div className='md:w-1/3 md:ml-4 flex flex-col gap-y-4'>
      <section className="rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-6 xl:p-8">
        <TitleSection label="Detalles de la Actividad" />
        <address className="text-sm font-normal not-italic text-gray-500 dark:text-gray-400 mt-3">
          <div>
            <ContentTitle label="Fecha de Solicitud: " />
            <Paragraphs label={actividad.Fecha_Solicitud} />
          </div>
          <div>
            <ContentTitle label="Fecha de Entrega: " />
            <Paragraphs label={actividad.Fecha_Entrega} />
          </div>
          <div>
            <ContentTitle label="Valor de la Actividad: " />
            <Paragraphs label={actividad.Valor_Actividad} />
          </div>
          <div>
            <ContentTitle label="Clave de Instrumento:" />
            <Paragraphs label={actividad.Clave_Instrumento} />
          </div>
          <div>
            <ContentTitle label="Modalidad:" />
            <Paragraphs label={actividad.Modalidad} />
          </div>
        </address>
      </section>
    </div>
  </div>
</section>
</div>
)}
</div>
  );
};

export default DetalleActividad;
