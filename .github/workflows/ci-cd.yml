name: PWA CI/CD Workflow UTHH_VIRTUAL

# Desencadenadores del flujo de trabajo
on:
  push:
    branches:
      - master
      - release/*
      - 'feature/**'
      - 'feature/pasarela-pagos'
      - 'feature/suscripciones'
      - 'feature/notificaciones-push'
      - 'feature/notificaciones-push-backend'
      - 'feature/apis-logica-negocio'
      - 'feature/diseno-responsivo'
      - 'feature/offline-pwa'
  pull_request:
    branches:
      - master
      - release/*
      - development
  workflow_dispatch: # Activación manual (opcional)

jobs:
  # Trabajo de build y pruebas
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x] # Prueba en varias versiones de Node.js

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Cache de dependencias npm
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}

      - name: Instalar dependencias
        run: npm install

      # Paso para instalar Cypress si no está en la caché
      - name: Cachear Cypress
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress

      - name: Instalar Cypress
        run: npx cypress install

      - name: Ejecutar pruebas unitarias con cobertura
        run: npm test -- --coverage # Ejecuta las pruebas con cobertura

      - name: Ejecutar pruebas E2E (opcional)
        run: npx cypress run || echo "Pruebas E2E fallaron, pero no detienen el pipeline"

      - name: Construir la aplicación (solo en ramas master o release)
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
        run: npm run build

      - name: Guardar artefactos de compilación (si el build es exitoso)
        if: success() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/'))
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 5 # Limitar la retención de los artefactos a 5 días para optimización de costos

  # Trabajo de despliegue a Vercel
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Descargar artefactos de compilación
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./dist

      - name: Desplegar a Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npx vercel --prod --token $VERCEL_TOKEN 

   # Notificaciones de éxito o fallo a Slack
   notifications:
    runs-on: ubuntu-latest
    if: failure() || success()

    steps:
      - name: Notificación de fallo a Slack
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ Error en el CI/CD en la rama ${{ github.ref }}. Revisa los detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificación de éxito a Slack
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"✅ CI/CD completado con éxito en la rama ${{ github.ref }}. Revisa los detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notificaciones en los Pull Requests con GitHub Script
  notify-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Agregar comentario en el Pull Request
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Se completó la ejecución de los tests y el linter para este PR. Revisa los resultados antes de hacer merge."
            })